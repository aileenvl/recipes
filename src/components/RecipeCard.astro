---
import type { Recipe } from '../data/recipes';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;

function formatDuration(duration: string) {
  if (!duration) return '0 mins';
  
  const hours = duration.match(/(\d+)H/);
  const minutes = duration.match(/(\d+)M/);
  
  const hoursValue = hours ? parseInt(hours[1]) : 0;
  const minutesValue = minutes ? parseInt(minutes[1]) : 0;
  
  if (hoursValue === 0) {
    return `${minutesValue} mins`;
  } else if (minutesValue === 0) {
    return `${hoursValue} hr`;
  } else {
    return `${hoursValue}h ${minutesValue}m`;
  }
}
---

<div class="bg-white rounded-lg shadow-md overflow-hidden">
  <div class="p-6">
    <h3 class="text-xl font-semibold text-gray-900 mb-2">{recipe.name}</h3>
    <div class="mb-2">
      <span class="inline-block bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">
        {recipe.category}
      </span>
    </div>

    <p class="text-gray-600 mb-4">{recipe.description}</p>

    <div class="flex flex-wrap gap-4 text-sm text-gray-500">
      <span>ðŸ•’ {formatDuration(recipe.timing.totalTime)}</span>
      <span>ðŸ‘¥ Serves {recipe.servings}</span>
      <span>ðŸ”¥ {Math.round(recipe.nutrition.calories)} cal</span>
    </div>
    <a
      href={`/recipe/${recipe.id}?name=${encodeURIComponent(recipe.name)}`}
      class="mt-4 inline-block px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
    >
      View Recipe
    </a>
  </div>
</div>